{"version":3,"file":"static/js/503.cdbed590.chunk.js","mappings":"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","sources":["components/ContactsListItem/ContactsListItem.jsx","redux/contacts/contactsSelectors.js","components/ContactsList/ContactsList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport { toast } from 'react-toastify';\nimport { ToastOptions } from 'services/toast-options';\n\nimport PropTypes from 'prop-types';\n\n// MUI STYLES\nimport ListItem from \"@mui/material/ListItem\";\nimport Tooltip from '@mui/material/Tooltip';\nimport ListItemText from \"@mui/material/ListItemText\";\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport AutoDeleteIcon from '@mui/icons-material/AutoDelete';\n\nconst ContactsListItem = ({ id, name, number }) => {  \n  const dispatch = useDispatch();\n  const deleteContactData = (id) => dispatch(deleteContact(id));\n\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  const onClickDeleteContact = () => {\n    setIsDeleting(true);\n    deleteContactData(id)\n      .then((response) => {\n        if (response.error) {\n          toast.error(`Contact wasn't deleted: ${response.payload}`, ToastOptions);\n        } else {\n          toast.info(`Contact ${name.toUpperCase()} was deleted`, ToastOptions);\n        };\n      })\n      .finally(() => {\n        setIsDeleting(false);\n      });\n  };\n  \n  return (    \n    <ListItem\n      secondaryAction={\n        <Tooltip title=\"Delete contact\" placement=\"left-start\">\n          <IconButton\n            onClick={onClickDeleteContact}\n            disabled={isDeleting}\n            aria-label=\"delete\"\n            sx={{ color: \"#c9c9c9\", boxShadow: 3, border: 1, borderColor: \"orange\" }}\n          >\n            {isDeleting\n              ? <AutoDeleteIcon sx={{ color: \"orange\" }} />\n              : <DeleteIcon />}\n          </IconButton>\n        </Tooltip>\n      }\n    >          \n      <ListItemText>{name} - &#9743; {number}</ListItemText>          \n    </ListItem >    \n  )\n};\n\nexport default ContactsListItem;\n\nContactsListItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onDeleteContact: PropTypes.func,\n}","export const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import ContactsListItem from '../ContactsListItem/ContactsListItem';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, selectIsLoading } from 'redux/contacts/contactsSelectors';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { getFilter } from 'redux/filterSlice';\n\nimport PropTypes from 'prop-types';\n\n// MUI STYLES\nimport Box from '@mui/material/Box';\nimport { Virtuoso } from 'react-virtuoso';\n\nconst ContactsList = () => {  \n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const filter = useSelector(getFilter);  \n  \n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilteredContacts = () => {        \n    const normalizedFilter = filter.toLowerCase();\n    \n    if (contacts) {\n      return contacts.filter(contact => \n        contact.name.toLowerCase().includes(normalizedFilter)\n      );\n    }\n  };    \n\n  return (\n    <Box\n      component=\"ul\"\n      autoComplete=\"off\"\n      sx={{ display: 'flex', flexDirection: 'column', m: '0 10px 0 auto', maxWidth: '500px', color: '#fff' }}\n    >\n      {isLoading && <b>Refreshing contacts...</b>}\n\n      {contacts &&\n        <Virtuoso\n          style={{ height: '190px' }}\n          totalCount={contacts.length}\n          data={getFilteredContacts()}\n          itemContent={(_index, contact) => {\n            return (<ContactsListItem key={contact.id} {...contact} />)\n          }}\n        />\n      }\n    </Box>\n  )\n};\n\nexport default ContactsList;\n\nContactsList.propTypes = {  \n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  onDeleteContact: PropTypes.func,\n};","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { addContact } from 'redux/contacts/contactsOperations';\n\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n// TOAST\nimport { toast } from 'react-toastify';\nimport { ToastOptions } from 'services/toast-options';\n\n// MUI STYLES\nimport styled from '@emotion/styled';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\n\nimport Button from '@mui/material/Button';\nimport AddIcon from '@mui/icons-material/Add';\nimport Stack from '@mui/material/Stack';\n\nconst CssTextField = styled(TextField)({    \n  '& label': {\n    color: '#fff',\n  },\n  '& label.Mui-focused': {\n    color: '#00f4ff',\n  },  \n  '& .MuiOutlinedInput-root': {\n    '&': {      \n      color: '#fff',       \n      marginBottom: '30px',\n    },\n    '& fieldset': {\n      borderColor: '#fff',      \n    },\n    '&:hover fieldset': {\n      borderColor: '#00f4ff',\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: '#00f4ff',\n    },\n  },\n});\n\nfunction ContactForm() {  \n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const addContactData = data => { dispatch(addContact(data)) };\n  \n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');  \n  \n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    \n    switch (name) {      \n      case 'name':\n        setName(value);\n        break;\n      \n      case 'number':\n        setNumber(value);\n        break;\n      \n      default:\n        return;\n    };    \n  };  \n\n  const handleSubmit = e => {\n    e.preventDefault(); \n    const form = e.currentTarget;\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };    \n    \n    const checkDuplicateContact = contacts.some(contact =>\n      contact.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n    );\n    \n    if (checkDuplicateContact) {\n      return toast.error(`${name.toUpperCase()} is already in contacts`, ToastOptions);\n    };\n\n    if (!checkDuplicateContact) {      \n      toast.success(`${name.toUpperCase()} added to phonebook`, ToastOptions);          \n      addContactData(contact);      \n    } else {\n      toast.error('Something went wrong... :(', ToastOptions);\n    }\n    \n    setName('');\n    setNumber('');    \n    form.reset();\n  };\n  \n  return (\n    <Box\n      component=\"form\"\n      onSubmit={handleSubmit}\n      autoComplete=\"off\"\n      sx={{ m: '80px 10px 30px auto', maxWidth: '500px', color: '#fff' }}\n    >\n      <Typography variant='h5' component='h1' sx={{ fontWeight: 'bold', color: '#00f4ff', mb: '30px' }}> \n        Add Contact Form\n      </Typography>\n\n      <CssTextField\n        id=\"outlined-basic\"\n        type=\"text\"\n        name=\"name\"        \n        label=\"Name\"\n        onChange={handleChange}        \n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        inputProps={{ pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\" }}\n        variant=\"outlined\" \n        size=\"small\"\n        fullWidth\n        required\n      />\n      \n      <CssTextField\n        id=\"outlined-basic\"\n        type=\"tel\"\n        name=\"number\"        \n        label=\"Number\"\n        onChange={handleChange}  \n        inputProps={{ pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\" }}\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        variant=\"outlined\" \n        size=\"small\"\n        fullWidth\n        required\n      />           \n\n      <Stack direction=\"row\" spacing={2} color='#fff' mr='24px'>\n        <Button\n          type=\"submit\"          \n          color=\"inherit\"          \n          variant=\"outlined\"\n          endIcon={<AddIcon />}\n        >\n          Add Contact\n        </Button>        \n      </Stack>      \n    </Box>\n  )\n}\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};","import { useDispatch, useSelector } from \"react-redux\";\nimport { setFilter, getFilter } from 'redux/filterSlice';\n\nimport PropTypes from 'prop-types';\n\n// MUI STYLES\nimport styled from '@emotion/styled';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\n\nconst CssTextField = styled(TextField)({    \n  '& label': {\n    color: '#fff',\n  },\n  '& label.Mui-focused': {\n    color: '#00f4ff',\n  },  \n  '& .MuiOutlinedInput-root': {\n    '&': {      \n      color: '#fff',       \n      marginBottom: '30px',\n    },\n    '& fieldset': {\n      borderColor: '#fff',      \n    },\n    '&:hover fieldset': {\n      borderColor: '#00f4ff',\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: '#00f4ff',\n    },\n  },\n});\n\nconst Filter = () => {\n  const dispatch = useDispatch();  \n  const filter = useSelector(getFilter);\n\n  const onChangeFilter = e => {\n    dispatch(\n      setFilter(e.target.value)\n    );\n  };\n\n  return (\n    <Box\n      component=\"form\"      \n      autoComplete=\"off\"\n      sx={{ m: '0 10px 0 auto', maxWidth: '500px', color: '#fff' }}\n    >\n      <Typography variant='h6' component='h2' sx={{ color: 'orange', mb: '20px' }}> \n        Find contacts by name\n      </Typography>\n\n      <CssTextField id=\"outlined-basic\"\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}      \n        variant=\"outlined\" \n        size=\"small\"\n        fullWidth\n        required\n      />      \n    </Box>\n  )\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  onChange: PropTypes.func,\n};","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport ContactsList from 'components/ContactsList';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();  \n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n\n      <ContactForm />\n      <Filter />      \n      <ContactsList />\n    </HelmetProvider>\n  )\n};\n\nexport default Contacts;"],"names":["id","name","number","dispatch","useDispatch","useState","isDeleting","setIsDeleting","ListItem","secondaryAction","Tooltip","title","placement","IconButton","onClick","deleteContact","deleteContactData","then","response","error","toast","payload","ToastOptions","toUpperCase","finally","disabled","sx","color","boxShadow","border","borderColor","AutoDelete","Delete","ListItemText","selectContacts","state","contacts","selectIsLoading","isLoading","useSelector","filter","getFilter","useEffect","fetchContacts","Box","component","autoComplete","display","flexDirection","m","maxWidth","style","height","totalCount","length","data","normalizedFilter","toLowerCase","contact","includes","getFilteredContacts","itemContent","_index","CssTextField","styled","TextField","marginBottom","setName","setNumber","handleChange","e","currentTarget","value","onSubmit","preventDefault","form","shortid","checkDuplicateContact","some","toLocaleLowerCase","addContact","reset","Typography","variant","fontWeight","mb","type","label","onChange","inputProps","pattern","size","fullWidth","required","Stack","direction","spacing","mr","Button","endIcon","Add","setFilter","target"],"sourceRoot":""}